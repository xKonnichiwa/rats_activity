import os
import mne
import numpy as np
import matplotlib.pyplot as plt
import shutil
from model.main import annotate_edf
from model.annotation_utils import seconds_to_hms
from matplotlib.widgets import Slider
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import (
    QApplication, QFileDialog, QMainWindow, QPushButton,
    QLabel, QVBoxLayout, QWidget, QMessageBox, QSplitter, QListWidget, QHBoxLayout, QInputDialog, QLineEdit
)

def process_edf(file_path):
    return mne.io.read_raw_edf(file_path, preload=False)

class MainWindow(QMainWindow):
    file_path = "" # –ü—É–ª—å –∫ —Ñ–∞–π–ª—É
    step_size = 1   
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞, –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª-—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        """
        super().__init__()
        self.setWindowTitle("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –≠–ö–æ–ì –ø–æ EDF") # –ò–º—è –æ–∫–Ω–∞
        self.setWindowIcon(QIcon("rat.ico")) # –ò–∫–æ–Ω–∫–∞ –¥–ª—è –æ–∫–Ω–∞
        self.setMinimumSize(1024, 768) # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.showMaximized() # –†–∞–∑–≤–æ—Ä–∞—á–∏–µ—Ç –æ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (–≤ –æ–∫–Ω–µ)

        self.raw = None # –ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å EDF
        self.predictions = None # –ù–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

        # –í–µ—Ä—Ö–Ω–∏–π –ª–µ–π–±–ª (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π)
        self.label_info = QLabel('–§–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .edf –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω', self)
        self.label_info.setAlignment(Qt.AlignCenter)
        self.label_info.setFixedHeight(20)

        # –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è
        self.button_load = QPushButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å EDF-—Ñ–∞–π–ª', self)
        self.button_load.clicked.connect(self.load_file)

        self.button_predict = QPushButton('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—ã', self)
        self.button_predict.clicked.connect(self.save_file)
        self.button_predict.setEnabled(False)

        self.button_save = QPushButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é', self)
        self.button_save.clicked.connect(self.save_file)
        self.button_save.setEnabled(False)

        self.button_zoom_in_height = QPushButton('‚¨ÜÔ∏è', self)
        self.button_zoom_in_height.setFixedWidth(25)
        self.button_zoom_out_height = QPushButton('‚¨áÔ∏è', self)
        self.button_zoom_out_height.setFixedWidth(25)
        self.button_zoom_in_width = QPushButton('‚û°Ô∏è', self)
        self.button_zoom_in_width.setFixedWidth(25)
        self.button_zoom_out_width = QPushButton('‚¨ÖÔ∏è', self)
        self.button_zoom_out_width.setFixedWidth(25)
        self.button_zoom_in = QPushButton('üîç+', self)
        self.button_zoom_in.setFixedWidth(25)
        self.button_zoom_out = QPushButton('üîç-', self)
        self.button_zoom_out.setFixedWidth(25)

        self.button_zoom_in_height.clicked.connect(self.zoom_in_height)
        self.button_zoom_out_height.clicked.connect(self.zoom_out_height)
        self.button_zoom_in_width.clicked.connect(self.zoom_in_width)
        self.button_zoom_out_width.clicked.connect(self.zoom_out_width)
        self.button_zoom_in.clicked.connect(self.zoom_in)
        self.button_zoom_out.clicked.connect(self.zoom_out)

        self.annotation_label = QLabel("–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:", self)
        self.annotation_label.setAlignment(Qt.AlignCenter)
        self.annotation_list = QListWidget()
        self.annotation_list.itemClicked.connect(self.jump_to_annotation)

        control_layout = QVBoxLayout()
        control_layout.addWidget(self.button_load)
        control_layout.addWidget(self.button_save)
        control_layout.addWidget(self.annotation_label)
        control_layout.addWidget(self.annotation_list)

        self.button_edit_annotation = QPushButton('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é', self)
        self.button_edit_annotation.clicked.connect(self.edit_annotation)
        self.button_edit_annotation.setEnabled(False)
        control_layout.addWidget(self.button_edit_annotation)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        self.button_add_annotation = QPushButton('–î–æ–±–∞–≤–∏—Ç—å 2 –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏', self)
        self.button_add_annotation.clicked.connect(self.add_annotations)
        self.button_add_annotation.setEnabled(False)
        control_layout.addWidget(self.button_add_annotation)

        self.button_toggle_theme = QPushButton('–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É', self)
        self.button_toggle_theme.clicked.connect(self.toggle_theme)
        control_layout.addWidget(self.button_toggle_theme)


        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        self.button_delete_annotation = QPushButton('–£–¥–∞–ª–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é', self)
        self.button_delete_annotation.clicked.connect(self.delete_annotation)
        self.button_delete_annotation.setEnabled(False)
        control_layout.addWidget(self.button_delete_annotation)

        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        self.annotation_list.itemSelectionChanged.connect(
            lambda: self.button_delete_annotation.setEnabled(bool(self.annotation_list.selectedItems()))
        )



        zoom_layout = QHBoxLayout()
        zoom_layout.addWidget(self.button_zoom_in_height)
        zoom_layout.addWidget(self.button_zoom_out_height)
        zoom_layout.addWidget(self.button_zoom_in_width)
        zoom_layout.addWidget(self.button_zoom_out_width)
        zoom_layout.addWidget(self.button_zoom_in)
        zoom_layout.addWidget(self.button_zoom_out)

        control_layout.addLayout(zoom_layout)

        control_panel = QWidget()
        control_panel.setLayout(control_layout)

        # –ì—Ä–∞—Ñ–∏–∫
        self.figure, self.ax = plt.subplots(figsize=(10, 6))
        self.ax.axis('off') # –£–±–∏—Ä–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–µ–π –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        self.canvas = FigureCanvas(self.figure) # –ö–ê–ù–í–ê–°

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–∏ –æ—Å–∏
        self.ax1 = self.figure.add_subplot(3, 1, 1, position=[0.05, 0.7, 0.9, 0.25])
        self.ax2 = self.figure.add_subplot(3, 1, 2, position=[0.05, 0.4, 0.9, 0.25])
        self.ax3 = self.figure.add_subplot(3, 1, 3, position=[0.05, 0.1, 0.9, 0.25])

        # –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Å–µ–π
        for ax in [self.ax1, self.ax2, self.ax3]:
            ax.axis('on')

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        self.channel_colors = ['red', 'green', 'blue']

        # –°–ª–∞–π–¥–µ—Ä
        self.slider_ax = self.figure.add_axes([0.1, 0.02, 0.8, 0.04], facecolor='lightgoldenrodyellow')
        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –º–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞ 0, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞,
        # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∞–π–ª–∞–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–∑–º–µ—Ä —Å–ª–∞–π–¥–µ—Ä–∞
        self.slider = Slider(self.slider_ax, '–í—Ä–µ–º—è, —Å–µ–∫.', 0, 0, valinit=0, valstep=1)
        self.slider.on_changed(self.update_plot)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        splitter = QSplitter()
        splitter.addWidget(control_panel)
        splitter.addWidget(self.canvas)
        splitter.setStretchFactor(0, 1)
        splitter.setStretchFactor(1, 5)

        # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ–∫—Å
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.label_info)
        main_layout.addWidget(splitter)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container = QWidget()
        container.setLayout(main_layout)
        self.setCentralWidget(container)

    def zoom_in_height(self):
        self.adjust_axes(scale_x=1.0, scale_y=1.2)

    def zoom_out_height(self):
        self.adjust_axes(scale_x=1.0, scale_y=0.8)

    def zoom_in_width(self):
        self.adjust_axes(scale_x=1.2, scale_y=1.0)

    def zoom_out_width(self):
        self.adjust_axes(scale_x=0.8, scale_y=1.0)

    def zoom_in(self):
        self.adjust_axes(scale_x=1.2, scale_y=1.2)

    def zoom_out(self):
        self.adjust_axes(scale_x=0.8, scale_y=0.8)

    def adjust_axes(self, scale_x=1.0, scale_y=1.0):
        """
        –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –æ—Å–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º.
        scale_x : float
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –æ—Å–∏ X.
        scale_y : float
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –æ—Å–∏ Y.
        """
        for ax in [self.ax1, self.ax2, self.ax3]:
            xlim = ax.get_xlim()
            ylim = ax.get_ylim()

            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–µ–ª–æ–≤
            new_xlim = [(xlim[0] + (xlim[1] - xlim[0]) * (1 - scale_x) / 2),
                        (xlim[1] - (xlim[1] - xlim[0]) * (1 - scale_x) / 2)]
            new_ylim = [(ylim[0] + (ylim[1] - ylim[0]) * (1 - scale_y) / 2),
                        (ylim[1] - (ylim[1] - ylim[0]) * (1 - scale_y) / 2)]

            ax.set_xlim(new_xlim)
            ax.set_ylim(new_ylim)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        self.canvas.draw()

    def load_file(self):
        """
        –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.\n
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É\n

        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–¥–∞–Ω –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å - ""
        """
        file_name, file_extension = os.path.splitext(self.file_path)
        self.file_path, _ = QFileDialog.getOpenFileName(self, "–ó–∞–≥—Ä—É–∑–∏—Ç—å EDF-—Ñ–∞–π–ª", "", "EDF-—Ñ–∞–π–ª—ã (*.edf)")
        if self.file_path:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–π–±–ª–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–º —Ñ–∞–π–ª–µ
            self.label_info.setText(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞: {os.path.basename(self.file_path)}...")

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é annotate_edf
            status = annotate_edf(self.file_path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if status == "success":
                try:
                    file_name, file_extension = os.path.splitext(self.file_path)
                    self.raw = process_edf(f"{file_name}_annotated{file_extension}")
                    self.label_info.setText(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(self.file_path)}")

                    total_duration = self.raw.times[-1]
                    max_time = max(0, total_duration - 10)

                    self.slider.valmin = 0
                    self.slider.valmax = max_time
                    self.slider.set_val(0)
                    self.slider.ax.set_xlim(0, max_time)

                    self.init_plot()
                    self.update_annotation_list()

                    self.button_save.setEnabled(True)
                    self.button_add_annotation.setEnabled(True)
                except Exception as e:
                    self.label_info.setText(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {os.path.basename(self.file_path)} - {e}")
            else:
                self.label_info.setText(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª: {os.path.basename(self.file_path)}.")
        else:
            self.label_info.setText("–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.")

    def edit_annotation(self):
        """
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Å–ø–∏—Å–∫–µ (–≤–∫–ª—é—á–∞—è —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è).
        """
        selected_item = self.annotation_list.currentItem()
        if selected_item:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            current_text = selected_item.text().split(" - ")[0]
            current_time_str = selected_item.text().split(" - ")[1]
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            new_text, ok_text = QInputDialog.getText(self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                                    "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:", 
                                                    QLineEdit.Normal, current_text)
            if ok_text and new_text:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                new_time_str, ok_time = QInputDialog.getText(self, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                                            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (HH:MM:SS):", 
                                                            QLineEdit.Normal, current_time_str)
                if ok_time:
                    try:
                        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
                        hours, minutes, seconds = map(int, new_time_str.split(":"))
                        new_onset = hours * 3600 + minutes * 60 + seconds

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                        index = self.annotation_list.currentRow()

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –≤—Ä–µ–º—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ raw-–¥–∞–Ω–Ω—ã—Ö
                        self.raw.annotations.description[index] = new_text
                        self.raw.annotations.onset[index] = new_onset

                        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
                        updated_item_text = f"{new_text} - {new_time_str}"
                        self.annotation_list.item(index).setText(updated_item_text)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        self.plot_annotations()
                    except ValueError:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.")

    def update_annotation_list(self):
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ.
        """
        # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        self.annotation_list.clear()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ raw-–¥–∞–Ω–Ω—ã—Ö
        if not self.raw.annotations or len(self.raw.annotations) == 0:
            return  # –ï—Å–ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ (onset) –∏ –æ–ø–∏—Å–∞–Ω–∏–π (description) –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        onsets = self.raw.annotations.onset
        descriptions = self.raw.annotations.description

        # –û–±—Ö–æ–¥–∏–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫
        for onset, description in zip(onsets, descriptions):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è onset –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã"
            onset_hms = seconds_to_hms(onset)
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
            item_text = f"{description} - {onset_hms}"
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            self.annotation_list.addItem(item_text)

    def plot_annotations(self):
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏.
        """
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ª–∏–Ω–∏–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏ —Ç–µ–∫—Å—Ç–∞
        for item in getattr(self, "annotation_lines", []) + getattr(self, "annotation_texts", []):
            item.remove()

        self.annotation_lines = []
        self.annotation_texts = []

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        start_time = self.slider.val
        end_time = start_time + 10
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –≤–∏–¥–∏–º—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        for onset, description in zip(self.raw.annotations.onset, self.raw.annotations.description):
            if start_time <= onset <= end_time:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–∏–≥—É—Ä—ã
                x_coord = (onset - start_time) / (end_time - start_time)

                # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —á–µ—Ä–µ–∑ –≤—Å—é –≤—ã—Å–æ—Ç—É —Ñ–∏–≥—É—Ä—ã
                line = plt.Line2D(
                    [x_coord, x_coord], [0.08, 0.96],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ Figure –ø–æ –æ—Å–∏ Y
                    color="purple", linestyle="--", zorder=10,
                    transform=self.figure.transFigure  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø–æ Figure, —á—Ç–æ–±—ã –ø–æ–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Å–∏
                )
                self.figure.add_artist(line)
                self.annotation_lines.append(line)

                # –¢–µ–∫—Å—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –ø–æ —Ü–µ–Ω—Ç—Ä—É —Ñ–∏–≥—É—Ä—ã
                text = self.figure.text(
                    x_coord, 0.915, f"{description} \n {seconds_to_hms(onset)}",
                    color="purple", fontsize=10, ha="left", va="bottom",
                    transform=self.figure.transFigure
                )
                self.annotation_texts.append(text)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.canvas.draw()

    def delete_annotation(self):
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –Ω–µ–π –≤—Ç–æ—Ä–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.
        """
        selected_item = self.annotation_list.currentItem()
        if selected_item:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            index = self.annotation_list.currentRow()

            # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –ø–∞—Ä—ã
            paired_index = index + 1 if index % 2 == 0 else index - 1

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π, –∏—Å–∫–ª—é—á–∞—è –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏ —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –Ω–µ–π
            new_onset = np.delete(self.raw.annotations.onset, [index, paired_index])
            new_duration = np.delete(self.raw.annotations.duration, [index, paired_index])
            new_description = np.delete(self.raw.annotations.description, [index, paired_index])

            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            self.raw.set_annotations(mne.Annotations(new_onset, new_duration, new_description))

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            self.update_annotation_list()
            self.plot_annotations()

    def add_annotations(self):
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–≤—É—Ö –Ω–æ–≤—ã—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π.
        """
        if self.raw is None:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω EDF-—Ñ–∞–π–ª. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
            return

        # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        text1, ok1 = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:")
        if ok1 and text1:
            # –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            time_str1, ok_time1 = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                                    "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–≤–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (HH:MM:SS):")
            if ok_time1:
                try:
                    hours1, minutes1, seconds1 = map(int, time_str1.split(":"))
                    onset1 = hours1 * 3600 + minutes1 * 60 + seconds1
                except ValueError:
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.")
                    return
            else:
                return

            # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            text2, ok2 = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏:")
            if ok2 and text2:
                # –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
                time_str2, ok_time2 = QInputDialog.getText(self, "–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é", 
                                                        "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Ç–æ—Ä–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ (HH:MM:SS):")
                if ok_time2:
                    try:
                        hours2, minutes2, seconds2 = map(int, time_str2.split(":"))
                        onset2 = hours2 * 3600 + minutes2 * 60 + seconds2
                    except ValueError:
                        QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS.")
                        return
                else:
                    return

            # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ raw-–¥–∞–Ω–Ω—ã–µ
            self.raw.annotations.append(onset1, 0, text1)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 0)
            self.raw.annotations.append(onset2, 0, text2)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å 0)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
            self.update_annotation_list()
            self.plot_annotations()

    def jump_to_annotation(self, item):
        """
        –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.

        item : QtWidgets.QListWidgetItem\n
            –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–ø–∏—Å–∞–Ω–∏–µ\n
            –∏ –≤—Ä–µ–º—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "description - HH:MM:SS".
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å–ø–∏—Å–∫–∞
        text = item.text()
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ onset (HH:MM:SS) –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –µ—ë –≤ —Å–µ–∫—É–Ω–¥—ã
        onset_time_str = text.split(" - ")[1]
        hours, minutes, seconds = map(int, onset_time_str.split(":"))
        onset_time = hours * 3600 + minutes * 60 + seconds
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã –æ–∫–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (10 —Å–µ–∫—É–Ω–¥)
        window_width = 10
        start_time = max(0, onset_time - window_width / 2)
        end_time = start_time + window_width
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ –∏ –æ—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        self.slider.set_val(start_time)
        self.ax.set_xlim(start_time, end_time)
        self.ax.set_ylim(-20, 20)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.update_plot(start_time)
        self.button_edit_annotation.setEnabled(True)

    def init_plot(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≠–ö–æ–ì.
        """
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        for ax in [self.ax1, self.ax2, self.ax3]:
            ax.clear()

        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞ (sfreq) –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Å—ç–º–ø–ª—ã (10 —Å–µ–∫—É–Ω–¥)
        sfreq = self.raw.info['sfreq']
        start_sample = 0
        end_sample = int(10 * sfreq)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        channels = self.raw.get_data(start=start_sample, stop=end_sample)
        times = self.raw.times[start_sample:end_sample]
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        channel_names = self.raw.ch_names[:len(channels)]
        for i, ax in enumerate([self.ax1, self.ax2, self.ax3]):
            if i < len(channels):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                norm_channel = (channels[i] - np.mean(channels[i])) / np.max(np.abs(channels[i]))
                # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞
                ax.plot(times, norm_channel, label=channel_names[i], color=self.channel_colors[i])
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ—Å–∏ X –∏ Y
                ax.set_xlim(times[0], times[-1])
                ax.set_ylim(-1.5, 1.5)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X
                ax.set_title(f"–ö–∞–Ω–∞–ª {channel_names[i]}")
                ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: seconds_to_hms(x)))
                # –í–∫–ª—é—á–∞–µ–º —Å–µ—Ç–∫—É –∏ –ª–µ–≥–µ–Ω–¥—É
                ax.grid(True)
                ax.legend()
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        self.canvas.draw()
        self.plot_annotations()

    def update_plot(self, val):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–ª–∞–π–¥–µ—Ä–∞.\n

        val : float
            –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ\n
            –Ω–∞—á–∞–ª–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏.
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (10 —Å–µ–∫—É–Ω–¥)
        start_time = self.slider.val
        end_time = start_time + 10
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏ (sfreq) –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ —Å—ç–º–ø–ª—ã
        sfreq = self.raw.info['sfreq']
        start_sample = int(start_time * sfreq)
        end_sample = int(end_time * sfreq)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∫–æ–Ω–µ—á–Ω—ã–π —Å—ç–º–ø–ª –Ω–µ –≤—ã—Ö–æ–¥–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–∞–Ω–Ω—ã—Ö
        if end_sample > self.raw.n_times:
            end_sample = self.raw.n_times

        # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—ç–º–ø–ª –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω –∫–æ–Ω–µ—á–Ω–æ–º—É, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        if start_sample >= end_sample:
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        times = self.raw.times[start_sample:end_sample]
        channels = self.raw.get_data(start=start_sample, stop=end_sample)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏–∑ —Ç—Ä—ë—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        for i, ax in enumerate([self.ax1, self.ax2, self.ax3]):
            if i < len(channels):
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ (—É–±–∏—Ä–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∏ –¥–µ–ª–∏–º –Ω–∞ –º–∞–∫—Å–∏–º—É–º –ø–æ –º–æ–¥—É–ª—é)
                norm_channel = (channels[i] - np.mean(channels[i])) / np.max(np.abs(channels[i]))
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥—Ä–∞—Ñ–∏–∫ –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                ax.clear()
                ax.plot(times, norm_channel, label=self.raw.ch_names[i], color=self.channel_colors[i])
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ—Å–µ–π
                ax.set_xlim(times[0], times[-1])
                ax.set_ylim(-1.5, 1.5)
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—å X –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã"
                ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: seconds_to_hms(x)))
                # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –∏ –≤–∫–ª—é—á–∞–µ–º —Å–µ—Ç–∫—É
                ax.legend(loc="upper right")
                ax.grid(True)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        self.canvas.draw()
        self.plot_annotations()

    def save_file(self):
        if self.raw is not None:
            # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path, _ = QFileDialog.getSaveFileName(self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏", self.file_path, "–í—Å–µ —Ñ–∞–π–ª—ã (*.*)")

            if file_path:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∏–∑ –ø—É—Ç–∏
                base_name, extension = os.path.splitext(file_path)
                annotated_file_path = f"{base_name}_annotated{extension}"

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if os.path.exists(annotated_file_path):
                    try:
                        os.remove(annotated_file_path)
                        print(f"–§–∞–π–ª {annotated_file_path} –±—ã–ª —É–¥–∞–ª—ë–Ω.")
                    except Exception as e:
                        QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏: {str(e)}")
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –ø—É—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
                if file_path == annotated_file_path:
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ
                    try:
                        self.raw.save(annotated_file_path, overwrite=True)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
                        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã –≤ {annotated_file_path}")
                    except Exception as e:
                        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏: {str(e)}")
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                else:
                    # –ï—Å–ª–∏ –ø—É—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –ø–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
                    try:
                        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –≤ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ
                        shutil.move(self.file_path, annotated_file_path)
                        QMessageBox.information(self, "–£—Å–ø–µ—Ö", f"–ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –≤ {annotated_file_path}")
                    except Exception as e:
                        QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å —Ñ–∞–π–ª —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏: {str(e)}")
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {e}")
        os.remove("annotated_is_file.edf")

    def keyPressEvent(self, event):
            """
            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –≤ –æ–∫–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
            –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ—â–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å –ø–æ–º–æ—â—å—é —Å—Ç—Ä–µ–ª–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤–ª–µ–≤–æ –∏ –≤–ø—Ä–∞–≤–æ).
            """
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –∫–ª–∞–≤–∏—à–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞
            if event.key() == Qt.Key_Left:
                # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ –≤–ª–µ–≤–æ, —É–º–µ–Ω—å—à–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞
                new_val = max(self.slider.val - self.step_size, self.slider.valmin)
                self.slider.set_val(new_val)
                self.update_plot(new_val)

            elif event.key() == Qt.Key_Right:
                # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞ –≤–ø—Ä–∞–≤–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞
                new_val = min(self.slider.val + self.step_size, self.slider.valmax)
                self.slider.set_val(new_val)
                self.update_plot(new_val)

            elif event.key() == Qt.Key_Up:
                # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ step_size
                self.step_size += 1

            elif event.key() == Qt.Key_Down:
                # –£–º–µ–Ω—å—à–µ–Ω–∏–µ step_size, –Ω–æ –Ω–µ –Ω–∏–∂–µ 1
                self.step_size = max(1, self.step_size - 1)

    def toggle_theme(self):
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–∞–º–∏.
        """
        if self.styleSheet() == "":
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
            dark_theme = """
            QWidget {
                background-color: #2d2d2d;
                color: #ffffff;
            }
            QPushButton {
                background-color: #444444;
                color: #ffffff;
                border: 1px solid #555555;
                border-radius: 5px;
                padding: 5px;
            }
            QPushButton:hover {
                background-color: #555555;
            }
            QLabel {
                color: #ffffff;
            }
            QListWidget {
                background-color: #3c3c3c;
                color: #ffffff;
                border: 1px solid #555555;
            }
            QSlider::groove:horizontal {
                border: 1px solid #999999;
                height: 10px;
                background: #2e2e2e;
            }
            QSlider::handle:horizontal {
                background: #aaaaaa;
                border: 1px solid #5c5c5c;
                width: 14px;
                margin: -5px 0;
                border-radius: 7px;
            }
            """
            self.setStyleSheet(dark_theme)
            self.button_toggle_theme.setText('–°–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É')
        else:
            # –°–±—Ä–æ—Å —Ç–µ–º—ã (–≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–µ—Ç–ª–æ–π —Ç–µ–º–µ)
            self.setStyleSheet("")
            self.button_toggle_theme.setText('–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É')

app = QApplication([]) 
window = MainWindow()
window.show()
app.exec_()
